         249Understanding the difﬁculty of training deep feedforward neural networks
Xavier Glorot Yoshua Bengio
DIRO, Universit ´e de Montr ´eal, Montr ´eal, Qu ´ebec, Canada
Abstract
Whereas before 2006 it appears that deep multi-
layer neural networks were not successfully
trained, since then several algorithms have been
shown to successfully train them, with experi-
mental results showing the superiority of deeper
vs less deep architectures. All these experimen-
tal results were obtained with new initialization
or training mechanisms. Our objective here is to
understand better why standard gradient descent
from random initialization is doing so poorly
with deep neural networks, to better understand
these recent relative successes and help design
better algorithms in the future. We ﬁrst observe
the inﬂuence of the non-linear activations func-
tions. We ﬁnd that the logistic sigmoid activation
is unsuited for deep networks with random ini-
tialization because of its mean value, which can
drive especially the top hidden layer into satu-
ration. Surprisingly, we ﬁnd that saturated units
can move out of saturation by themselves, albeit
slowly, and explaining the plateaus sometimes
seen when training neural networks. We ﬁnd that
a new non-linearity that saturates less can often
be beneﬁcial. Finally, we study how activations
and gradients vary across layers and during train-
ing, with the idea that training may be more dif-
ﬁcult when the singular values of the Jacobian
associated with each layer are far from 1. Based
on these considerations, we propose a new ini-
tialization scheme that brings substantially faster
convergence.
1 Deep Neural Networks
Deep learning methods aim at learning feature hierarchies
with features from higher levels of the hierarchy formed
by the composition of lower level features. They include
Appearing in Proceedings of the 13thInternational Conference
on Artiﬁcial Intelligence and Statistics (AISTATS) 2010, Chia La-
guna Resort, Sardinia, Italy. V olume 9 of JMLR: W&CP 9. Copy-
right 2010 by the authors.learning methods for a wide array of deep architectures ,
including neural networks with many hidden layers (Vin-
cent et al., 2008) and graphical models with many levels of
hidden variables (Hinton et al., 2006), among others (Zhu
et al., 2009; Weston et al., 2008). Much attention has re-
cently been devoted to them (see (Bengio, 2009) for a re-
view), because of their theoretical appeal, inspiration from
biology and human cognition, and because of empirical
success in vision (Ranzato et al., 2007; Larochelle et al.,
2007; Vincent et al., 2008) and natural language process-
ing (NLP) (Collobert & Weston, 2008; Mnih & Hinton,
2009). Theoretical results reviewed and discussed by Ben-
gio (2009), suggest that in order to learn the kind of com-
plicated functions that can represent high-level abstractions
(e.g. in vision, language, and other AI-level tasks), one
may need deep architectures .
Most of the recent experimental results with deep archi-
tecture are obtained with models that can be turned into
deep supervised neural networks, but with initialization or
training schemes different from the classical feedforward
neural networks (Rumelhart et al., 1986). Why are these
new algorithms working so much better than the standard
random initialization and gradient-based optimization of a
supervised training criterion? Part of the answer may be
found in recent analyses of the effect of unsupervised pre-
training (Erhan et al., 2009), showing that it acts as a regu-
larizer that initializes the parameters in a “better” basin of
attraction of the optimization procedure, corresponding to
an apparent local minimum associated with better general-
ization. But earlier work (Bengio et al., 2007) had shown
that even a purely supervised but greedy layer-wise proce-
dure would give better results. So here instead of focus-
ing on what unsupervised pre-training or semi-supervised
criteria bring to deep architectures, we focus on analyzing
what may be going wrong with good old (but deep) multi-
layer neural networks.
Our analysis is driven by investigative experiments to mon-
itor activations (watching for saturation of hidden units)
and gradients, across layers and across training iterations.
We also evaluate the effects on these of choices of acti-
vation function (with the idea that it might affect satura-
tion) and initialization procedure (since unsupervised pre-
training is a particular form of initialization and it has a
drastic impact).
         250Understanding the difﬁculty of training deep feedforward neural networks
2 Experimental Setting and Datasets
Code to produce the new datasets introduced in this section
is available from: http://www.iro.umontreal.
ca/˜lisa/twiki/bin/view.cgi/Public/
DeepGradientsAISTATS2010 .
2.1 Online Learning on an Inﬁnite Dataset:
Shapeset- 3×2
Recent work with deep architectures (see Figure 7 in Ben-
gio (2009)) shows that even with very large training sets
or online learning, initialization from unsupervised pre-
training yields substantial improvement, which does not
vanish as the number of training examples increases. The
online setting is also interesting because it focuses on the
optimization issues rather than on the small-sample regu-
larization effects, so we decided to include in our experi-
ments a synthetic images dataset inspired from Larochelle
et al. (2007) and Larochelle et al. (2009), from which as
many examples as needed could be sampled, for testing the
online learning scenario.
We call this dataset the Shapeset- 3×2dataset, with ex-
ample images in Figure 1 (top). Shapeset- 3×2con-
tains images of 1 or 2 two-dimensional objects, each taken
from 3 shape categories (triangle, parallelogram, ellipse),
and placed with random shape parameters (relative lengths
and/or angles), scaling, rotation, translation and grey-scale.
We noticed that for only one shape present in the image the
task of recognizing it was too easy. We therefore decided
to sample also images with two objects, with the constraint
that the second object does not overlap with the ﬁrst by
more than ﬁfty percent of its area, to avoid hiding it en-
tirely. The task is to predict the objects present (e.g. trian-
gle + ellipse, parallelogram + parallelogram, triangle alone,
etc.) without having to distinguish between the foreground
shape and the background shape when they overlap. This
therefore deﬁnes nine conﬁguration classes.
The task is fairly difﬁcult because we need to discover in-
variances over rotation, translation, scaling, object color,
occlusion and relative position of the shapes. In parallel we
need to extract the factors of variability that predict which
object shapes are present.
The size of the images are arbitrary but we ﬁxed it to 32 ×32
in order to work with deep dense networks efﬁciently.
2.2 Finite Datasets
The MNIST digits (LeCun et al., 1998a), dataset has
50,000 training images, 10,000 validation images (for
hyper-parameter selection), and 10,000 test images, each
showing a 28×28 grey-scale pixel image of one of the 10
digits.
CIFAR-10 (Krizhevsky & Hinton, 2009) is a labelled sub-
Figure 1: Top: Shapeset-3×2 images at 64×64 resolution.
The examples we used are at 32 ×32 resolution. The learner
tries to predict which objects (parallelogram, triangle, or el-
lipse) are present, and 1 or 2 objects can be present, yield-
ing 9 possible classiﬁcations. Bottom: Small-ImageNet
images at full resolution.
set of the tiny-images dataset that contains 50,000 training
examples (from which we extracted 10,000 as validation
data) and 10,000 test examples. There are 10 classes cor-
responding to the main object in each image: airplane, au-
tomobile, bird, cat, deer, dog, frog, horse, ship, or truck.
The classes are balanced. Each image is in color, but is
just 32×32pixels in size, so the input is a vector of
32×32×3 = 3072 real values.
Small-ImageNet which is a set of tiny 37 ×37 gray level
images dataset computed from the higher-resolution and
larger set at http://www.image-net.org , with la-
bels from the WordNet noun hierarchy. We have used
90,000 examples for training, 10,000 for the validation set,
and 10,000 for testing. There are 10 balanced classes: rep-
tiles, vehicles, birds, mammals, ﬁsh, furniture, instruments,
tools, ﬂowers and fruits Figure 1 (bottom) shows randomly
chosen examples.
2.3 Experimental Setting
We optimized feedforward neural networks with one to
ﬁve hidden layers, with one thousand hidden units per
layer, and with a softmax logistic regression for the out-
put layer. The cost function is the negative log-likelihood
−logP(y|x), where (x, y)is the (input image, target class)
pair. The neural networks were optimized with stochastic
back-propagation on mini-batches of size ten, i.e., the av-
erage gof∂−logP(y|x)
∂θwas computed over 10 consecutive
         251Xavier Glorot, Yoshua Bengio
training pairs (x, y)and used to update parameters θin that
direction, with θ←θ−/epsilon1g. The learning rate /epsilon1is a hyper-
parameter that is optimized based on validation set error
after a large number of updates (5 million).
We varied the type of non-linear activation function in the
hidden layers: the sigmoid 1/(1 + e−x), the hyperbolic
tangent tanh( x), and a newly proposed activation func-
tion (Bergstra et al., 2009) called the softsign, x/(1 +|x|).
The softsign is similar to the hyperbolic tangent (its range
is -1 to 1) but its tails are quadratic polynomials rather
than exponentials, i.e., it approaches its asymptotes much
slower.
In the comparisons, we search for the best hyper-
parameters (learning rate and depth) separately for each
model. Note that the best depth was always ﬁve for
Shapeset- 3×2, except for the sigmoid, for which it was
four.
We initialized the biases to be 0 and the weights Wijat
each layer with the following commonly used heuristic:
Wij∼U/bracketleftBig
−1√n,1√n/bracketrightBig
, (1)
where U[−a, a]is the uniform distribution in the interval
(−a, a)andnis the size of the previous layer (the number
of columns of W).
3 Effect of Activation Functions and
Saturation During Training
Two things we want to avoid and that can be revealed from
the evolution of activations is excessive saturation of acti-
vation functions on one hand (then gradients will not prop-
agate well), and overly linear units (they will not compute
something interesting).
3.1 Experiments with the Sigmoid
The sigmoid non-linearity has been already shown to slow
down learning because of its none-zero mean that induces
important singular values in the Hessian (LeCun et al.,
1998b). In this section we will see another symptomatic
behavior due to this activation function in deep feedforward
networks.
We want to study possible saturation, by looking at the evo-
lution of activations during training, and the ﬁgures in this
section show results on the Shapeset- 3×2data, but sim-
ilar behavior is observed with the other datasets. Figure 2
shows the evolution of the activation values (after the non-
linearity) at each hidden layer during training of a deep ar-
chitecture with sigmoid activation functions. Layer 1 refers
to the output of ﬁrst hidden layer, and there are four hidden
layers. The graph shows the means and standard deviations
of these activations. These statistics along with histograms
are computed at different times during learning, by looking
at activation values for a ﬁxed set of 300 test examples.
Figure 2: Mean and standard deviation (vertical bars) of the
activation values (output of the sigmoid) during supervised
learning, for the different hidden layers of a deep archi-
tecture. The top hidden layer quickly saturates at 0 (slow-
ing down all learning), but then slowly desaturates around
epoch 100.
We see that very quickly at the beginning, all the sigmoid
activation values of the last hidden layer are pushed to their
lower saturation value of 0. Inversely, the others layers
have a mean activation value that is above 0.5, and decreas-
ing as we go from the output layer to the input layer. We
have found that this kind of saturation can last very long in
deeper networks with sigmoid activations, e.g., the depth-
ﬁve model never escaped this regime during training. The
big surprise is that for intermediate number of hidden lay-
ers (here four), the saturation regime may be escaped. At
the same time that the top hidden layer moves out of satura-
tion, the ﬁrst hidden layer begins to saturate and therefore
to stabilize.
We hypothesize that this behavior is due to the combina-
tion of random initialization and the fact that an hidden unit
output of 0 corresponds to a saturated sigmoid. Note that
deep networks with sigmoids but initialized from unsuper-
vised pre-training (e.g. from RBMs) do not suffer from
this saturation behavior. Our proposed explanation rests on
the hypothesis that the transformation that the lower layers
of the randomly initialized network computes initially is
not useful to the classiﬁcation task, unlike the transforma-
tion obtained from unsupervised pre-training. The logistic
layer output softmax( b+W h)might initially rely more on
its biases b(which are learned very quickly) than on the top
hidden activations hderived from the input image (because
hwould vary in ways that are not predictive of y, maybe
correlated mostly with other and possibly more dominant
variations of x). Thus the error gradient would tend to
push W h towards 0, which can be achieved by pushing
htowards 0. In the case of symmetric activation functions
like the hyperbolic tangent and the softsign, sitting around
0 is good because it allows gradients to ﬂow backwards.
However, pushing the sigmoid outputs to 0 would bring
them into a saturation regime which would prevent gradi-
ents to ﬂow backward and prevent the lower layers from
learning useful features. Eventually but slowly, the lower
layers move toward more useful features and the top hidden
layer then moves out of the saturation regime. Note how-
ever that, even after this, the network moves into a solution
that is of poorer quality (also in terms of generalization)
         252Understanding the difﬁculty of training deep feedforward neural networks
then those found with symmetric activation functions, as
can be seen in ﬁgure 11.
3.2 Experiments with the Hyperbolic tangent
As discussed above, the hyperbolic tangent networks do not
suffer from the kind of saturation behavior of the top hid-
den layer observed with sigmoid networks, because of its
symmetry around 0. However, with our standard weight
initialization U/bracketleftBig
−1√n,1√n/bracketrightBig
, we observe a sequentially oc-
curring saturation phenomenon starting with layer 1 and
propagating up in the network, as illustrated in Figure 3.
Why this is happening remains to be understood.
Figure 3: Top:98 percentiles (markers alone) and standard
deviation (solid lines with markers) of the distribution of
the activation values for the hyperbolic tangent networks in
the course of learning. We see the ﬁrst hidden layer satu-
rating ﬁrst, then the second, etc. Bottom: 98 percentiles
(markers alone) and standard deviation (solid lines with
markers) of the distribution of activation values for the soft-
sign during learning. Here the different layers saturate less
and do so together.
3.3 Experiments with the Softsign
The softsign x/(1+|x|)is similar to the hyperbolic tangent
but might behave differently in terms of saturation because
of its smoother asymptotes (polynomial instead of expo-
nential). We see on Figure 3 that the saturation does not
occur one layer after the other like for the hyperbolic tan-
gent. It is faster at the beginning and then slow, and all
layers move together towards larger weights.
We can also see at the end of training that the histogram
of activation values is very different from that seen with
the hyperbolic tangent (Figure 4). Whereas the latter yields
modes of the activations distribution mostly at the extremes
(asymptotes -1 and 1) or around 0, the softsign network has
modes of activations around its knees (between the linear
regime around 0 and the ﬂat regime around -1 and 1). These
are the areas where there is substantial non-linearity butwhere the gradients would ﬂow well.
Figure 4: Activation values normalized histogram at the
end of learning, averaged across units of the same layer and
across 300 test examples. Top: activation function is hyper-
bolic tangent, we see important saturation of the lower lay-
ers. Bottom: activation function is softsign, we see many
activation values around (-0.6,-0.8) and (0.6,0.8) where the
units do not saturate but are non-linear.
4 Studying Gradients and their Propagation
4.1 Effect of the Cost Function
We have found that the logistic regression or conditional
log-likelihood cost function ( −logP(y|x)coupled with
softmax outputs) worked much better (for classiﬁcation
problems) than the quadratic cost which was tradition-
ally used to train feedforward neural networks (Rumelhart
et al., 1986). This is not a new observation (Solla et al.,
1988) but we ﬁnd it important to stress here. We found that
the plateaus in the training criterion (as a function of the pa-
rameters) are less present with the log-likelihood cost func-
tion. We can see this on Figure 5, which plots the training
criterion as a function of two weights for a two-layer net-
work (one hidden layer) with hyperbolic tangent units, and
a random input and target signal. There are clearly more
severe plateaus with the quadratic cost.
4.2 Gradients at initialization
4.2.1 Theoretical Considerations and a New
Normalized Initialization
We study the back-propagated gradients, or equivalently
the gradient of the cost function on the inputs biases at each
layer. Bradley (2009) found that back-propagated gradients
were smaller as one moves from the output layer towards
the input layer, just after initialization. He studied networks
with linear activation at each layer, ﬁnding that the variance
of the back-propagated gradients decreases as we go back-
wards in the network. We will also start by studying the
linear regime.
         253Xavier Glorot, Yoshua Bengio
Figure 5: Cross entropy (black, surface on top) and
quadratic (red, bottom surface) cost as a function of two
weights (one at each layer) of a network with two layers,
W1respectively on the ﬁrst layer and W2on the second,
output layer.
For a dense artiﬁcial neural network using symmetric acti-
vation function fwith unit derivative at 0 (i.e. f/prime(0) = 1 ),
if we write zifor the activation vector of layer i, and si
the argument vector of the activation function at layer i,
we have si=ziWi+biandzi+1=f(si). From these
deﬁnitions we obtain the following:
∂Cost
∂si
k=f/prime(si
k)Wi+1
k,•∂Cost
∂si+1(2)
∂Cost
∂wi
l,k=zi
l∂Cost
∂si
k(3)
The variances will be expressed with respect to the input,
outpout and weight initialization randomness. Consider
the hypothesis that we are in a linear regime at the initial-
ization, that the weights are initialized independently and
that the inputs features variances are the same ( =V ar[x]).
Then we can say that, with nithe size of layer iandxthe
network input,
f/prime(si
k)≈1, (4)
V ar[zi] =V ar[x]i−1/productdisplay
i/prime=0ni/primeV ar[Wi/prime], (5)
We write V ar[Wi/prime]for the shared scalar variance of all
weights at layer i/prime. Then for a network with dlayers,
V ar/bracketleftBig∂Cost
∂si/bracketrightBig
=V ar/bracketleftBig∂Cost
∂sd/bracketrightBigd/productdisplay
i/prime=ini/prime+1V ar[Wi/prime],(6)
V ar/bracketleftBig∂Cost
∂wi/bracketrightBig
=i−1/productdisplay
i/prime=0ni/primeV ar[Wi/prime]d−1/productdisplay
i/prime=ini/prime+1V ar[Wi/prime]
×V ar[x]V ar/bracketleftBig∂Cost
∂sd/bracketrightBig
.
(7)From a forward-propagation point of view, to keep infor-
mation ﬂowing we would like that
∀(i, i/prime), V ar [zi] =V ar[zi/prime]. (8)
From a back-propagation point of view we would similarly
like to have
∀(i, i/prime), V ar/bracketleftBig∂Cost
∂si/bracketrightBig
=V ar/bracketleftBig∂Cost
∂si/prime/bracketrightBig
. (9)
These two conditions transform to:
∀i, n iV ar[Wi] = 1 (10)
∀i, n i+1V ar[Wi] = 1 (11)
As a compromise between these two constraints, we might
want to have
∀i, V ar [Wi] =2
ni+ni+1(12)
Note how both constraints are satisﬁed when all layers have
the same width. If we also have the same initialization for
the weights we could get the following interesting proper-
ties:
∀i, V ar/bracketleftBig∂Cost
∂si/bracketrightBig
=/bracketleftBig
nV ar [W]/bracketrightBigd−i
V ar[x] (13)
∀i, V ar/bracketleftBig∂Cost
∂wi/bracketrightBig
=/bracketleftBig
nV ar [W]/bracketrightBigd
V ar[x]V ar/bracketleftBig∂Cost
∂sd/bracketrightBig
(14)
We can see that the variance of the gradient on the weights
is the same for all layers, but the variance of the back-
propagated gradient might still vanish or explode as we
consider deeper networks. Note how this is reminis-
cent of issues raised when studying recurrent neural net-
works (Bengio et al., 1994), which can be seen as very deep
networks when unfolded through time.
The standard initialization that we have used (eq.1) gives
rise to variance with the following property:
nV ar [W] =1
3(15)
where nis the layer size (assuming all layers of the same
size). This will cause the variance of the back-propagated
gradient to be dependent on the layer (and decreasing).
The normalization factor may therefore be important when
initializing deep networks because of the multiplicative ef-
fect through layers, and we suggest the following initializa-
tion procedure to approximately satisfy our objectives of
maintaining activation variances and back-propagated gra-
dients variance as one moves up or down the network. We
call it the normalized initialization :
W∼U/bracketleftBig
−√
6√nj+nj+1,√
6√nj+nj+1/bracketrightBig
(16)
         254Understanding the difﬁculty of training deep feedforward neural networks
4.2.2 Gradient Propagation Study
To empirically validate the above theoretical ideas, we have
plotted some normalized histograms of activation values,
weight gradients and of the back-propagated gradients at
initialization with the two different initialization methods.
The results displayed (Figures 6, 7 and 8) are from exper-
iments on Shapeset- 3×2, but qualitatively similar results
were obtained with the other datasets.
We monitor the singular values of the Jacobian matrix as-
sociated with layer i:
Ji=∂zi+1
∂zi(17)
When consecutive layers have the same dimension, the av-
erage singular value corresponds to the average ratio of in-
ﬁnitesimal volumes mapped from zitozi+1, as well as
to the ratio of average activation variance going from zi
tozi+1. With our normalized initialization, this ratio is
around 0.8whereas with the standard initialization, it drops
down to 0.5.
Figure 6: Activation values normalized histograms with
hyperbolic tangent activation, with standard (top) vs nor-
malized initialization (bottom). Top: 0-peak increases for
higher layers.
4.3 Back-propagated Gradients During Learning
The dynamic of learning in such networks is complex and
we would like to develop better tools to analyze and track
it. In particular, we cannot use simple variance calculations
in our theoretical analysis because the weights values are
not anymore independent of the activation values and the
linearity hypothesis is also violated.
As ﬁrst noted by Bradley (2009), we observe (Figure 7) that
at the beginning of training, after the standard initializa-
tion (eq. 1), the variance of the back-propagated gradients
gets smaller as it is propagated downwards. However we
ﬁnd that this trend is reversed very quickly during learning.
Using our normalized initialization we do not see such de-
creasing back-propagated gradients (bottom of Figure 7).
Figure 7: Back-propagated gradients normalized his-
tograms with hyperbolic tangent activation, with standard
(top) vs normalized (bottom) initialization. Top: 0-peak
decreases for higher layers.
What was initially really surprising is that even when the
back-propagated gradients become smaller (standard ini-
tialization), the variance of the weights gradients is roughly
constant across layers, as shown on Figure 8. However, this
is explained by our theoretical analysis above (eq. 14). In-
terestingly, as shown in Figure 9, these observations on the
weight gradient of standard and normalized initialization
change during training (here for a tanh network). Indeed,
whereas the gradients have initially roughly the same mag-
nitude, they diverge from each other (with larger gradients
in the lower layers) as training progresses, especially with
the standard initialization. Note that this might be one of
the advantages of the normalized initialization, since hav-
ing gradients of very different magnitudes at different lay-
ers may yield to ill-conditioning and slower training.
Finally, we observe that the softsign networks share simi-
larities with the tanh networks with normalized initializa-
tion, as can be seen by comparing the evolution of activa-
tions in both cases (resp. Figure 3-bottom and Figure 10).
5 Error Curves and Conclusions
The ﬁnal consideration that we care for is the success
of training with different strategies, and this is best il-
lustrated with error curves showing the evolution of test
error as training progresses and asymptotes. Figure 11
shows such curves with online training on Shapeset- 3×2,
while Table 1 gives ﬁnal test error for all the datasets
studied ( Shapeset- 3×2, MNIST, CIFAR-10, and Small-
ImageNet). As a baseline, we optimized RBF SVM mod-
els on one hundred thousand Shapeset examples and ob-
tained 59.47% test error, while on the same set we obtained
50.47% with a depth ﬁve hyperbolic tangent network with
normalized initialization.
These results illustrate the effect of the choice of activa-
tion and initialization. As a reference we include in Fig-
Conclusions
The ﬁnal consideration that we care for is the success
of training with different strategies, and this is best il-
lustrated with error curves showing the evolution of test
error as training progresses and asymptotes. Figure 11
shows such curves with online training on Shapeset- 3×2,
while Table 1 gives ﬁnal test error for all the datasets
studied ( Shapeset- 3×2, MNIST, CIFAR-10, and Small-
ImageNet). As a baseline, we optimized RBF SVM mod-
els on one hundred thousand Shapeset examples and ob-
tained 59.47% test error, while on the same set we obtained
50.47% with a depth ﬁve hyperbolic tangent network with
normalized initialization.
These results illustrate the effect of the choice of activa-
tion and initialization. As a reference we include in Fig-